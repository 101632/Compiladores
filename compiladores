<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>Analisador Sintático </title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Roboto', sans-serif;
      padding: 20px;
      max-width: 900px;
      margin: auto;
      background: #2e2e2e;
      color: #f0f0f0;
    }
    .card {
      background: #3b3b3b;
      border-radius: 6px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
      padding: 15px;
      margin-bottom: 20px;
    }
    input, button {
      padding: 8px;
      font-size: 15px;
      margin-top: 10px;
      border-radius: 4px;
      border: 1px solid #666;
      background: #444;
      color: #fff;
    }
    button {
      background-color: white;
      color: #333;
      cursor: pointer;
      border: 1px solid #ccc;
    }
    button:hover {
      background-color: #e0e0e0;
    }
    pre {
      background: #1e1e1e;
      padding: 10px;
      border-left: 4px solid #007BFF;
      white-space: pre-wrap;
      color: #e0e0e0;
    }
    h1, h2 {
      color: #ffffff;
      margin-bottom: 10px;
    }
    .success {
      background-color: #2f5232;
      border-left: 4px solid #28a745;
      color: #d4edda;
      font-weight: bold;
    }
    .error {
      background-color: #5a2d2d;
      border-left: 4px solid #dc3545;
      color: #f8d7da;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <h1>Analisador Sintático</h1>

  <div class="card">
    <label><strong>Digite a sentença (alfabeto: a, b, c, d):</strong></label><br>
    <input type="text" id="entrada" placeholder="Ex: aabcc">
    <button onclick="analisar()">Analisar</button>
    <button onclick="gerarSentenca()">Gerar Sentença Aleatória</button>
  </div>

  <div class="card">
    <h2>Gramática</h2>
    <pre>
S → a A B | b C D | c D
A → a A | ε
B → b B | c
C → c C | d
D → d D | ε
    </pre>
  </div>

  <div class="card">
    <h2>Conjuntos FIRST e FOLLOW</h2>
    <pre>
FIRST:
S: { a, b, c }
A: { a, ε }
B: { b, c }
C: { c, d }
D: { d, ε }

FOLLOW:
S: { $ }
A: { b, c }
B: { $ }
C: { d }
D: { $ }
    </pre>
  </div>

  <div class="card">
    <h2>Tabela de Parsing</h2>
    <pre>
       | a           | b           | c           | d           | $           
------------------------------------------------------------------------
S      | S → a A B   | S → b C D   | S → c D     |             |             
A      | A → a A     | A → ε       | A → ε       |             | A → ε       
B      |             | B → b B     | B → c       |             |             
C      |             |             | C → c C     | C → d       |             
D      |             |             |             | D → d D     | D → ε       
    </pre>
  </div>

  <div class="card">
    <h2>Resultado</h2>
    <pre id="resultado"></pre>
  </div>

  <script>
    const grammar = {
      'S': [
        ['a', 'A', 'B'],
        ['b', 'C', 'D'],
        ['c', 'D']
      ],
      'A': [
        ['a', 'A'],
        ['ε']
      ],
      'B': [
        ['b', 'B'],
        ['c']
      ],
      'C': [
        ['c', 'C'],
        ['d']
      ],
      'D': [
        ['d', 'D'],
        ['ε']
      ]
    };

    function gerarSentenca(maxProfundidade = 10) {
      let sentenca = [];
      let pilha = ['S'];
      let profundidade = 0;

      while (pilha.length > 0 && profundidade < maxProfundidade) {
        const simbolo = pilha.pop();
        if (!grammar[simbolo]) {
          sentenca.push(simbolo);
        } else {
          const producoes = grammar[simbolo];
          const producao = producoes[Math.floor(Math.random() * producoes.length)];
          for (let i = producao.length - 1; i >= 0; i--) {
            if (producao[i] !== 'ε') {
              pilha.push(producao[i]);
            }
          }
        }
        profundidade++;
      }
      document.getElementById("entrada").value = sentenca.join('');
    }

    const parsingTable = {
      'S': {
        'a': ['a', 'A', 'B'],
        'b': ['b', 'C', 'D'],
        'c': ['c', 'D']
      },
      'A': {
        'a': ['a', 'A'],
        'b': ['ε'],
        'c': ['ε'],
        '$': ['ε']
      },
      'B': {
        'b': ['b', 'B'],
        'c': ['c']
      },
      'C': {
        'c': ['c', 'C'],
        'd': ['d']
      },
      'D': {
        'd': ['d', 'D'],
        '$': ['ε']
      }
    };

    function analisar() {
      const entrada = document.getElementById("entrada").value.trim();
      const resultadoEl = document.getElementById("resultado");

      if (!/^[abcd]*$/.test(entrada)) {
        resultadoEl.textContent = "❌ Sentença inválida. Use apenas os símbolos 'a', 'b', 'c', 'd'.";
        resultadoEl.className = "error";
        return;
      }

      const input = entrada + '$';
      const stack = ['$', 'S'];
      let pos = 0;
      let trace = 'Traço da pilha:\n';
      let iteration = 1;

      while (stack.length > 0) {
        const top = stack.pop();
        const current = input[pos];

        trace += `Iteração ${iteration++} | Pilha: [${stack.join(' ')}] | Topo: '${top}' | Entrada: '${current}'\n`;

        if (top === current) {
          trace += `✔️ Consumindo '${current}'\n\n`;
          pos++;
        } else if (parsingTable[top] && parsingTable[top][current]) {
          const production = parsingTable[top][current];
          if (production[0] !== 'ε') {
            for (let i = production.length - 1; i >= 0; i--) {
              stack.push(production[i]);
            }
            trace += `➡️ ${top} → ${production.join(' ')}\n\n`;
          } else {
            trace += `✔️ ${top} → ε\n\n`;
          }
        } else {
          trace += `❌ Erro: não há produção para '${top}' com entrada '${current}'\n`;
          resultadoEl.textContent = trace;
          resultadoEl.className = "error";
          return;
        }
      }

      if (pos === input.length) {
        trace += `✅ Sentença aceita!\n`;
        resultadoEl.className = "success";
      } else {
        trace += `❌ Sentença rejeitada! Restaram símbolos na entrada.\n`;
        resultadoEl.className = "error";
      }

      resultadoEl.textContent = trace;
    }
  </script>
</body>
</html>
